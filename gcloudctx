#!/bin/bash
#
# gcloudctx(1) is a utility to manage and switch between gcloud projects.

# Copyright 2018 Olivier Gerbron
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

[[ -n $DEBUG ]] && set -x

set -eou pipefail
IFS=$'\n\t'

GCLOUDCONF="${HOME}/.config/gcloud"
GCLOUDCTX="${GCLOUDCONF}/gcloudctx"

FORCE_RENAME="false"

YELLOW=$(tput setaf 3)
DARKBG=$(tput setab 0)
NORMAL=$(tput sgr0)

usage() {
  cat <<"EOF"
USAGE:
  gcloudctx                              : list the projects
  gcloudctx <NAME>                       : switch to project <NAME>
  gcloudctx -                            : switch to the previous project
  gcloudctx -c/--create <NAME>           : create context with project <NAME>
  gcloudctx <NEW_NAME>=<NAME>            : rename project <NAME> to <NEW_NAME>
  gcloudctx -f/--force <NEW_NAME>=<NAME> : force renaming of project <NAME> to <NEW_NAME>
                                           when <NEW_NAME> already exists

  gcloudctx <NEW_NAME>=.                 : rename current-project to <NEW_NAME>
  gcloudctx -d <NAME>                    : delete project <NAME> ('.' for current-project)
                                           (this command won't delete the user/cluster entry
                                           that is used by the project)

  gcloudctx -h,--help                    : show this message
EOF
  exit 1
}

current_project() {
  gcloud config configurations list --filter="IS_ACTIVE=True" --format="table(name)" | grep -v NAME
}

get_projects() {
   gcloud config configurations list --format="table(name)" | grep -v NAME
}

list_projects() {
  set -u pipefail
  local cur
  cur="$(current_project)"

  for c in $(get_projects); do
  if [[ -t 1 && "${c}" = "${cur}" ]]; then
    echo "${DARKBG}${YELLOW}${c}${NORMAL}"
  else
    echo "${c}"
  fi
  done
}

read_project() {
  if [[ -f "${GCLOUDCTX}" ]]; then
    cat "${GCLOUDCTX}"
  fi
}

save_project() {
  local saved
  saved="$(read_project)"

  if [[ "${saved}" != "${1}" ]]; then
    printf %s "${1}" > "${GCLOUDCTX}"
  fi
}

switch_project() {
  gcloud config configurations activate "${1}"
}

set_project() {
  local prev
  prev="$(current_project)"

  switch_project "${1}"

  if [[ "${prev}" != "${1}" ]]; then
    save_project "${prev}"
  fi
}

swap_project() {
  local ctx
  ctx="$(read_project)"
  if [[ -z "${ctx}" ]]; then
    echo "error: No previous project found." >&2
    exit 1
  fi
  set_project "${ctx}"
}

project_exists() {
  grep -q ^"${1}"\$ <(gcloud config configurations list --format="table(name)" | grep -v NAME)
}

rename_project() {
  local old_name="${1}"
  local new_name="${2}"

  if [[ "${old_name}" == "." ]]; then
    old_name="$(current_project)"
  fi

  if project_exists "${new_name}"; then
    echo "Project name \"${new_name}\" already exists" >&2
    if [[ "${FORCE_RENAME}" == "true" ]]; then
      echo "Force renaming activated, removing former project \"${new_name}\"" >&2
      rm -f $GCLOUDCONF/configurations/config_${new_name}
    else
      echo "Force renaming deactivated, use -f/--force to remove the existing project" >&2
      echo "gcloudctx -f/--force <NEW_NAME>=<NAME>" >&2
      exit 1
    fi
  fi
  mv $GCLOUDCONF/configurations/config_{"${old_name}","${new_name}"}
  echo "Renamed ${old_name} to ${DARKBG}${YELLOW}${new_name}${NORMAL}" >&2
  gcloud config configurations activate "${new_name}"
}

delete_project() {
  local ctx
  ctx="${1}"
  if [[ "${ctx}" == "." ]]; then
    ctx="$(current_project)"
  fi
  echo "Deleting project \"${ctx}\"..." >&2
  gcloud config configurations delete "${ctx}"  
}

main() {
  if [[ "$#" -eq 0 ]]; then
    list_projects
  fi

  #Getting input args
  while [[ $# -gt 0 ]]
  do
    case $1 in
      --delete|-d)
        shift
        if [[ "$#" -lt 1 ]]; then
          echo "error: missing project NAME" >&2
          usage
        elif [[ "$#" -gt 1 ]]; then
          echo "error: too many arguments" >&2
          usage
        fi
        delete_project "${1}"
        break
        ;;
      --force|-f)
        shift
        FORCE_RENAME="true"
        if [[ "$#" -lt 1 ]]; then
          echo "error: missing project NAME" >&2
          usage
        elif [[ "$#" -gt 1 ]]; then
          echo "error: too many arguments" >&2
          usage
        fi
        ;;
      *=*)
        if [[ "${1}" =~ (.+)=(.+) ]]; then
          rename_project "${BASH_REMATCH[2]}" "${BASH_REMATCH[1]}"
        else
          echo "Wrong syntax" >&2
          usage
        fi
        break
        ;;
      -)
        swap_project
        break
        ;;
      -h|--help)
        usage
        break
        ;;
      -*)
        echo "error: unrecognized flag \"${1}\"" >&2
        usage
        exit 1
        ;;
      *)
        set_project "${1}"
        break
        ;;
    esac
  done

  shift $((OPTIND - 1))
}

main "$@"
